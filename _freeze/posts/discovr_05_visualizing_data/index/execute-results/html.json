{
  "hash": "d3b711a911a30a0e355a964afa9ffc56",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"discovr_05 - Visualizing Data\"\nauthor: \"Colin Madland\"\ndate: \"2024-04-23\"\ncategories: [ggplot2, visualizing data, R, discovr]\neditor: visual\nimage: \"raft-canyon.jpeg\"\nfreeze: auto\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nwish_tib <- here::here(\"data/jiminy_cricket.csv\") |> readr::read_csv()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 500 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): strategy, time\ndbl (2): id, success\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nnotebook_tib <- here::here(\"data/notebook.csv\") |> readr::read_csv()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 40 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): sex, film\ndbl (1): arousal\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nexam_tib <- here::here(\"data/exam_anxiety.csv\") |> readr::read_csv()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 103 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): sex\ndbl (4): id, revise, exam_grade, anxiety\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n-   need to turn categorical variables into factors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwish_tib <- wish_tib |>\n  dplyr::mutate(\n    strategy = forcats::as_factor(strategy),\n    time = forcats::as_factor(time) |> forcats::fct_relevel(\"Baseline\")\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnotebook_tib <- notebook_tib |>\n  dplyr::mutate(\n    sex = forcats::as_factor(sex),\n    film = forcats::as_factor(film)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_tib <- exam_tib |>\n  dplyr::mutate(\n    id = forcats::as_factor(id),\n    sex = forcats::as_factor(sex)\n  )\n```\n:::\n\n\n\n## `ggplot2`\n\n-   part of the `tidyverse`\n\n`aes()`\n\n:   controls aesthetics of the plot\n\n### Geometric objects\n\n-   objects that represent data\n\n`geom_point()`\n\n:   plots data by points/dots\n\n`geom_boxplot()`\n\n:   plots boxplots\n\n`geom_histogram()`\n\n:   plots histograms\n\n`geom_errorbar()`\n\n:   plots error bars\n\n`geom_smooth()`\n\n:   plots summary lines\n\n### Objects or 'stats'\n\n-   some situations where it is easier to display a summary of the data directly to the plot (usually `stat_summary()`)\n\n### Scales\n\n-   control details of how data are mapped to their visual objects to control what appears on *x* and *y* axes using `scale_x_continuous()` and `scale_y_continuous()`, axis labels are controlled with `labs()`\n\n### Coordinate system\n\n-   `ggplot2` uses a Cartesian system.\n-   `coord_cartesian()` sets limits on *x* and *y* axes\n\n### Position adjustments\n\n-   `position_dodge()`forces objects to not overlap side by side\n-   `position_jitter()` adds small random adjustments to data points\n\n### Facets\n\n-   used to plot different parts of the data in different panels\n\n### Themes\n\n-   various themes to style the output\n-   can be overridden with `theme()` function\n\nEach of the above are layers that can be added to a plot, as below\n\n![Explanation of the layered approach to `ggplot2`](ggplot.png)\n\n## Boxplots (box-whisker plots)\n\n-   imaginary data based on peoples' level of success (0-100)\n-   one group told to wish for good success, other group told to work hard for success\n-   measured success again 5 years later\n-   The data are in `wish_tib`. The variables are `id` (the person’s id), `strategy` (hard work or wishing upon a star), `time` (baseline or 5 years), and `success` (the rating on my dodgy scale).\n\nCreating a boxplot...\n\n`geom_boxplot()`\n\n:   `ggplot2::ggplot(my_tib, aes(variable_for_x_axis, variable_for_y_axis))`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwish_plot <- ggplot2::ggplot(wish_tib, aes(time, success))  # creates an object called `wish_plot` that contains the boxplot\n# ggplot() function specifies the plot will use `wish_tib` and plots time on *x* and success on *y*\nwish_plot +\n  geom_boxplot() # adds boxplot geom to wish_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwish_plot <- ggplot2::ggplot(wish_tib, aes(time, success))\nwish_plot +\n  geom_boxplot() +\n  labs(x = \"Time\", y = \"Success (%)\") + # add labels to axes\n  theme_minimal() # add minimal theme layer\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n-   plot shows slight increase of success, but doesn't show the effect of hard work",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}